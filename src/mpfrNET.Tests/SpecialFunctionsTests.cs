using FluentAssertions;
using NUnit.Framework;
using System.ArbitraryPrecision;

namespace mpfrNET.Tests
{
	public class SpecialFunctionsTests
	{
		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity)]
		[TestCase(0, double.NegativeInfinity)]
		[TestCase(1, 0)]
		[TestCase(-1, double.NaN)]
		[TestCase(0.4, -0.916290731874155065183527211768011071450101219908262467791967881980785365)]
		[TestCase(2, 0.693147180559945309417232121458176568075500134360255254120680009493393621)]
		[TestCase(9.999, 2.302485087993712325682657954670077243204266090894201900519238035204856264)]
		[TestCase(10, 2.302585092994045684017991454684364207601101488628772976033327900967572609)]
		[TestCase(1234567890123, 27.84174213824383077016756910641102321518881583014475063503496616649672166)]
		public void Can_Ln(double left, double result)
		{
			var x = (double)new BigDecimal(left).Ln();
			x.Should().Be(result);
		}

		[Test]
		public void Can_Ln_ulong_max()
		{
			var a2 = new BigDecimal((ulong)1000000000, 1024).Ln();
			var b2 = new BigDecimal("20.7232658369464111561619230921592778684099133976589567842999511087081534", 10, 1024);

			a2.Should().Be(b2);

			var a1 = new BigDecimal(((ulong)1000000000000).ToString(), 2048).Ln();
			var b1 = new BigDecimal("27.6310211159285482082158974562123704912132178635452757123999348116108713", 10, 1024);

			a1.Should().Be(b1);

			var a = new BigDecimal(((ulong)1000000000000000).ToString(), 1024).Ln();
			var b = new BigDecimal("34.5387763949106852602698718202654631140165223294315946404999185145135891", 10, 1024);

			a.Should().Be(b);

			var x = new BigDecimal(ulong.MaxValue.ToString(), 1024).Ln();
			var y = new BigDecimal("44.3614195558364998026486456646990251351301665910743113187672175213419595", 10, 1024);
			x.Should().Be(y);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity)]
		[TestCase(0, double.NegativeInfinity)]
		[TestCase(1, 0)]
		[TestCase(-1, double.NaN)]
		[TestCase(0.4, -1.321928094887362347870319429489390175864831393024580612054756395815934776)]
		[TestCase(1024, 10)]
		[TestCase(9.999, 3.321783818169317312667541759643564948423217700960905620325686812784034478)]
		[TestCase(10, 3.321928094887362347870319429489390175864831393024580612054756395815934776)]
		public void Can_Log2(double left, double result)
		{
			var x = (double)new BigDecimal(left).Log2();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity)]
		[TestCase(0, double.NegativeInfinity)]
		[TestCase(1, 0)]
		[TestCase(-1, double.NaN)]
		[TestCase(0.4, -0.397940008672037609572522210551013946463620237075782917379145077745783621)]
		[TestCase(1000, 3)]
		[TestCase(9.999, 0.999956568380192489615443955976192773326249274054297415662088936238659348)]
		public void Can_Log10(double left, double result)
		{
			var x = (double)new BigDecimal(left).Log10();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, 0)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity)]
		[TestCase(0, 1)]
		[TestCase(1, 2.718281828459045235360287471352662497757247093699959574966967627724076630)]
		[TestCase(-2, 0.135335283236612691893999494972484403407631545909575881468158872654073374)]
		[TestCase(4.999, 148.2648201253242342339591225627208985720458425149174668922941623858720050)]
		[TestCase(5, 148.41315910257660342111558004055227962348766759387898904675284511091206482)]
		[TestCase(9.999, 22004.45033857464715721623840438148225727827858565599427258232680618244485)]
		[TestCase(10, 22026.46579480671651695790064528424436635351261855678107423542635522520281)]
		public void Can_Exp(double left, double result)
		{
			var x = (double)new BigDecimal(left).Exp();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, 0)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity)]
		[TestCase(0, 1)]
		[TestCase(1, 2)]
		[TestCase(-2, 0.25)]
		[TestCase(4.999, 31.97782697569448070151613937163205819747369486211219520368146244813466876)]
		[TestCase(9.999, 1023.290463222223382448516459892225862319158235587590246517806798340309400)]
		public void Can_Exp2(double left, double result)
		{
			var x = (double)new BigDecimal(left).Exp2();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, 0)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity)]
		[TestCase(0, 1)]
		[TestCase(1, 10)]
		[TestCase(-2, 0.01)]
		[TestCase(4.999, 99770.00638225533171944219428537623105521186139457315462487823089094547653)]
		[TestCase(-3.999, 0.000100230523807789967191540488932811055405366845354216064641163485230474)]
		public void Can_Exp10(double left, double result)
		{
			var x = (double)new BigDecimal(left).Exp10();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.NaN)]
		[TestCase(0, 0)]
		[TestCase(1, 0.841470984807896506652502321630298999622563060798371065672751709991910404)]
		[TestCase(-2, -0.909297426825681695396019865911744842702254971447890268378973011530967301)]
		[TestCase(4.99, -0.961712903426793497941146014411106681934080224160928287532493239748346422)]
		[TestCase(5, -0.958924274663138468893154406155993973352461543964601778131672454235102558)]
		[TestCase(-3.99, -0.961712903426793497941146014411106681934080224160928287532493239748346422)]
		[TestCase(-4, 0.756802495307928251372639094511829094135912887336472571485416773401310493)]
		public void Can_Sin(double left, double result)
		{
			var x = (double)new BigDecimal(left).Sin();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.NaN)]
		[TestCase(0, 1)]
		[TestCase(1, 0.540302305868139717400936607442976603732310420617922227670097255381100394)]
		[TestCase(-2, -0.416146836547142386997568229500762189766000771075544890755149973781964936)]
		[TestCase(4.99, 0.274058919545427243963091597696947545799038797732465290829096959767037072)]
		[TestCase(5, 0.283662185463226264466639171513557308334422592252215944930359066586151456)]
		[TestCase(-3.99, -0.661178837774880066670050952010127451311206612244513169987254125516567261)]
		[TestCase(-4, -0.653643620863611914639168183097750381424133596646218247007010283852737655)]
		public void Can_Cos(double left, double result)
		{
			var x = (double)new BigDecimal(left).Cos();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.NaN)]
		[TestCase(0, 0)]
		[TestCase(1, 1.557407724654902230506974807458360173087250772381520038383946605698861397)]
		[TestCase(-2, 2.185039863261518991643306102313682543432017746227663164562955869966773747)]
		[TestCase(4.99, -3.509146518646267387536600382600542853663235868893916368334918018877284240)]
		[TestCase(5, -3.380515006246585636982705879447343908709569208285459877176820980918346010)]
		[TestCase(-3.99, -1.134682910836536142332309242987146630132427147176134827387699219793091976)]
		[TestCase(-4, -1.157821282349577583137342418267323923119762767367142130084857189358985762)]
		public void Can_Tan(double left, double result)
		{
			var x = (double)new BigDecimal(left).Tan();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.NaN)]
		[TestCase(0, 1)]
		[TestCase(1, 1.850815717680925617911753241398650193470396655094009298835158277858815411)]
		[TestCase(-2, -2.402997961722380989754600401420066226245121093154526013044400970212074081)]
		[TestCase(4.99, 3.648850406542753600826176994730971005212497882868187665616772052218629276)]
		[TestCase(5, 3.525320085816088406701801059963244258542819400176246001736148496225839140)]
		[TestCase(-3.99, -1.512450101042832629061907729351585341131537856806412129279105804289479990)]
		[TestCase(-4, -1.529885656466397574629510922937355047038800024369051625337920108755249546)]
		public void Can_Sec(double left, double result)
		{
			var x = (double)new BigDecimal(left).Sec();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.NaN)]
		[TestCase(0, double.PositiveInfinity)]
		[TestCase(1, 1.188395105778121216261599452374551003527829834097962625265253666359184367)]
		[TestCase(-2, -1.099750170294616466756697397026312896658764443149845708742554443062569126)]
		[TestCase(4.99, -1.039811357876951842636100008918619086480954172138191196872410925471580705)]
		[TestCase(5, -1.042835212771405819783119855907759843972351752364546174404470858222228857)]
		[TestCase(-3.99, 1.332927540018903225330149439178690130422735775504814817468719637569059513)]
		[TestCase(-4, 1.321348708810902377696791756372864909930252037729668747102174016301533008)]
		public void Can_Csc(double left, double result)
		{
			var x = (double)new BigDecimal(left).Csc();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.NaN)]
		[TestCase(0, double.PositiveInfinity)]
		[TestCase(1, 0.642092615934330703006419986594265620230278113918171379101162280426276856)]
		[TestCase(-2, 0.457657554360285763750277410432047276428486329231674329641392162636292270)]
		[TestCase(4.99, -0.284969577270821000176253437554051039533297497727383135794405510694470803)]
		[TestCase(5, -0.295812915532745540427767168082485286068234795481534895337877768521957001)]
		[TestCase(-3.99, -0.881303481747828373615531886873991007728174144071000748692988305135018662)]
		[TestCase(-4, -0.863691154450616613946514345940817633501765708497994417460781853665240738)]
		public void Can_Cot(double left, double result)
		{
			var x = (double)new BigDecimal(left).Cot();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.NaN)]
		[TestCase(0, 1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(0.1, 1.470628905633336822885798512187058123529908727457923369096448441117505529)]
		[TestCase(-0.2, 1.772154247585227410686447243857374852338622781089781296744723539609517577)]
		[TestCase(1, 0)]
		[TestCase(-1, 3.141592653589793238462643383279502884197169399375105820974944592307816406)]
		[TestCase(-2, double.NaN)]
		[TestCase(5, double.NaN)]
		public void Can_Acos(double left, double result)
		{
			var x = (double)new BigDecimal(left).Acos();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.NaN)]
		[TestCase(0, 0)]
		[TestCase(0.1, 0.100167421161559796345523179452693318568675972229629541391023855036402673)]
		[TestCase(-0.2, -0.2013579207903307914551255522176234102400380814022283862572512434556093747)]
		[TestCase(1, 1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(-1, -1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(-2, double.NaN)]
		[TestCase(5, double.NaN)]
		public void Can_Asin(double left, double result)
		{
			var x = (double)new BigDecimal(left).Asin();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, -1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(double.PositiveInfinity, 1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(0, 0)]
		[TestCase(1, 0.785398163397448309615660845819875721049292349843776455243736148076954101)]
		[TestCase(-2, -1.107148717794090503017065460178537040070047645401432646676539207433710338)]
		[TestCase(4.99, 1.373015410509370335358839786718272987657298502189157868960815747095157856)]
		[TestCase(5, 1.373400766945015860861271926444961148650999595899700808969783355912874233)]
		[TestCase(-3.99, -1.325228041094851409018012743310492231460089568287830623853936996195074952)]
		[TestCase(-4, -1.325817663668032465059239210428475631184440601306368843360096381486553083)]
		public void Can_Atan(double left, double result)
		{
			var x = (double)new BigDecimal(left).Atan();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, 0, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NegativeInfinity, -2.356194490192344928846982537459627163147877049531329365731208444230862304)]
		[TestCase(double.NegativeInfinity, double.PositiveInfinity, -0.785398163397448309615660845819875721049292349843776455243736148076954101)]
		[TestCase(double.NegativeInfinity, 1, -1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(-1.1, double.NegativeInfinity, -3.141592653589793238462643383279502884197169399375105820974944592307816406)]
		[TestCase(+1.1, double.NegativeInfinity, +3.141592653589793238462643383279502884197169399375105820974944592307816406)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity, +0.785398163397448309615660845819875721049292349843776455243736148076954101)]
		[TestCase(double.PositiveInfinity, 1, 1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(-1.1, double.PositiveInfinity, -0)]
		[TestCase(+1.1, double.PositiveInfinity, +0)]
		[TestCase(+0, -0, 3.141592653589793238462643383279502884197169399375105820974944592307816406)]
		[TestCase(-0, -0, -3.141592653589793238462643383279502884197169399375105820974944592307816406)]
		[TestCase(+0, +0, +0)]
		[TestCase(+0, -1.1, 3.141592653589793238462643383279502884197169399375105820974944592307816406)]
		[TestCase(-0, -1.1, -3.141592653589793238462643383279502884197169399375105820974944592307816406)]
		[TestCase(+0, +1.1, +0)]
		[TestCase(-0, +1.1, +0)]
		[TestCase(-1.1, 0, -1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(+1.1, 0, 1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(-0, +1.1, +0)]
		[TestCase(-0, +1.1, +0)]
		[TestCase(1, 1, 0.785398163397448309615660845819875721049292349843776455243736148076954101)]
		[TestCase(-2, -1, -2.034443935795702735445577923100965844127121753973673174298405384874106067)]
		[TestCase(4.99, 1, 1.373015410509370335358839786718272987657298502189157868960815747095157856)]
		[TestCase(5, 1, 1.373400766945015860861271926444961148650999595899700808969783355912874233)]
		[TestCase(-3.99, 2, -1.106146714121415629021250450855805354737267728242661228200404929544196921)]
		[TestCase(-4, 2, -1.107148717794090503017065460178537040070047645401432646676539207433710338)]
		public void Can_Atan2(double left, double right, double result)
		{
			var x = (double)new BigDecimal(left).Atan2(new BigDecimal(right));
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.PositiveInfinity)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity)]
		[TestCase(0, 1)]
		[TestCase(1, 1.54308063481524377847790562075706168260152911236586370473740221471076906)]
		[TestCase(-2, 3.76219569108363145956221347777374610829397355823071160277764334758832358)]
		[TestCase(4.99, 73.4716145800935120806067071974207539097556179325922530296644164336913396)]
		[TestCase(5, 74.2099485247878444441061080444877140238682585894531720660915753212423741)]
		[TestCase(-3.99, 27.0366945387232036991170421315481980776360798272595249131802015312312006)]
		[TestCase(-4, 27.3082328360164866292019896120670598225013245530837721602980969429964562)]
		public void Can_Cosh(double left, double result)
		{
			var x = (double)new BigDecimal(left).Cosh();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NegativeInfinity)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity)]
		[TestCase(0, 0)]
		[TestCase(1, 1.17520119364380145688238185059560081515571798133409587022956541301330756)]
		[TestCase(-2, -3.6268604078470187676682139828012617048863420123211357213094844749342502)]
		[TestCase(4.99, 73.4648089156012815358077418649169250428385390442108557458619077906086792)]
		[TestCase(5, 74.2032105777887589770094719960645655996194090044258169806612697896696906)]
		[TestCase(-3.99, -27.018194824603384454144855633238862914684181387765807470924948547342387)]
		[TestCase(-4, -27.289917197127752448908271590793818580289412485530296565528497015557205)]
		public void Can_Sinh(double left, double result)
		{
			var x = (double)new BigDecimal(left).Sinh();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, -1)]
		[TestCase(double.PositiveInfinity, 1)]
		[TestCase(0, 0)]
		[TestCase(1, 0.76159415595576488811945828260479359041276859725793655159681050012195324)]
		[TestCase(-2, -0.9640275800758168839464137241009231502550299762409347760482632174131079)]
		[TestCase(4.99, 0.99990737015198146360391103254707614120988225342480352880235593568786914)]
		[TestCase(5, 0.99990920426259513121099044753447302108981261599054786273642887226256101)]
		[TestCase(-3.99, -0.9993157553304704796936637406048769355821838611776492609649855236356239)]
		[TestCase(-4, -0.9993292997390670437922433443417249620053398528944096480078068964566788)]
		public void Can_Tanh(double left, double result)
		{
			var x = (double)new BigDecimal(left).Tanh();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, 0)]
		[TestCase(double.PositiveInfinity, 0)]
		[TestCase(0, 1)]
		[TestCase(1, 0.64805427366388539957497735322615032310848931207194202303786533731871759)]
		[TestCase(-2, 0.26580222883407969212086273981988897153078265443226806971464114746672454)]
		[TestCase(4.99, 0.01361069857679350913289230305141361724667259765629227581746616048786562)]
		[TestCase(5, 0.01347528222130455730551913824488215529083735394170068683328190349666328)]
		[TestCase(-3.99, 0.03698676990886418362446931304398614461616734375646691767198975944374882)]
		[TestCase(-4, 0.03661899347368653277264188522556967163400714355141632527568907820256686)]
		public void Can_Sech(double left, double result)
		{
			var x = (double)new BigDecimal(left).Sech();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, 0)]
		[TestCase(double.PositiveInfinity, 0)]
		[TestCase(0, double.NaN)]
		[TestCase(1, 0.85091812823932154513384276328717528418172466091033961699042115172900336)]
		[TestCase(-2, -0.2757205647717832077583514821630271212496226719912580519731712337225655)]
		[TestCase(4.99, 0.01361195945052864608157040667654009155996372489473870745061226392125502)]
		[TestCase(5, 0.01347650583058908665538188128433796461803545533648381469783314207734058)]
		[TestCase(-3.99, -0.0370120952377387252908728825055181610055564713896374651872754619218206)]
		[TestCase(-4, -0.0366435703258656059656980203334487807036806465041299137608592582157054)]
		public void Can_Csch(double left, double result)
		{
			var x = (double)new BigDecimal(left).Csch();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, -1)]
		[TestCase(double.PositiveInfinity, 1)]
		[TestCase(0, double.NaN)]
		[TestCase(1, 1.31303528549933130363616124693084783291201394124045265554315296756708427)]
		[TestCase(-2, -1.0373147207275480958778097647678207116623912692491946035699817338445187)]
		[TestCase(4.99, 1.00009263842910214480372122503691901359693438081926607841771723835762203)]
		[TestCase(5, 1.00009080398201937553665792052168760383054743752189075415940865595757242)]
		[TestCase(-3.99, -1.0006847131808736897308302287348525895733955908184407022130229845565053)]
		[TestCase(-4, -1.00067115040168248991211174443437193095871062274506468980912247562881335)]
		public void Can_Coth(double left, double result)
		{
			var x = (double)new BigDecimal(left).Coth();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.PositiveInfinity)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity)]
		[TestCase(0, double.NaN)]
		[TestCase(1, 0)]
		[TestCase(-2, double.NaN)]
		[TestCase(4.99, 2.29038829879853035570209846769665710152805197247061148950146225021810139)]
		[TestCase(5, 2.29243166956117768780078731134801543162186824001571024760501644483134785)]
		public void Can_Acosh(double left, double result)
		{
			var x = (double)new BigDecimal(left).Acosh();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NegativeInfinity)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity)]
		[TestCase(0, 0)]
		[TestCase(1, 0.88137358701954302523260932497979230902816032826163541075329560865337718)]
		[TestCase(-2, -1.4436354751788103424932767402731052694055530031569815589830545065204916)]
		[TestCase(4.99, 2.31047529181676658600892859012143670336432975425467697466488384043177828)]
		[TestCase(5, 2.31243834127275262025356234136441438365824507264655923716722899009913255)]
		[TestCase(-3.99, -2.0922843333072845305031598310755256679329619265872166739923177345355369)]
		[TestCase(-4, -2.0947125472611012942448228460655286534531510481986732658868059799262479)]
		public void Can_Asinh(double left, double result)
		{
			var x = (double)new BigDecimal(left).Asinh();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.NaN)]
		[TestCase(0, 0)]
		[TestCase(0.1, 0.10033534773107558063572655206003894526336286914595913587458952092779251)]
		[TestCase(-0.2, 0.20273255405408219098900655773217456828599521173124709880700716207205033)]
		[TestCase(1, double.PositiveInfinity)]
		[TestCase(-2, double.NaN)]
		public void Can_Atanh(double left, double result)
		{
			var x = (double)new BigDecimal(left).Atanh();
			x.Should().Be(result);
		}

		[TestCase((ulong)0, (ulong)1)]
		[TestCase((ulong)1, (ulong)1)]
		[TestCase((ulong)2, (ulong)2)]
		[TestCase((ulong)3, (ulong)6)]
		[TestCase((ulong)4, (ulong)24)]
		[TestCase((ulong)5, (ulong)120)]
		[TestCase((ulong)10, (ulong)3628800)]
		public void Can_Fact(ulong left, ulong result)
		{
			var x = (ulong)new BigDecimal(left).Fact(left);
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.PositiveInfinity)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity)]
		[TestCase(0, 0)]
		[TestCase(-0.5, -0.6931471805599453094172321214581765680755001343602552541206800094933936)]
		[TestCase(1, 0.69314718055994530941723212145817656807550013436025525412068000949339362)]
		[TestCase(-2, double.NaN)]
		[TestCase(4.99, 1.79009141212735798077421626351272827172130707261513337137249039845923371)]
		[TestCase(5, 1.79175946922805500081247735838070227272299069218300470585537434313088791)]
		public void Can_Log1p(double left, double result)
		{
			var x = (double)new BigDecimal(left).Log1p();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, -1)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity)]
		[TestCase(0, 0)]
		[TestCase(1, 1.71828182845904523536028747135266249775724709369995957496696762772407663)]
		[TestCase(-2, -0.8646647167633873081060005050275155965923684540904241185318411273459266)]
		[TestCase(4.99, 145.936423495694793616414449062337678952594156976803108775526324224300018)]
		[TestCase(5, 147.413159102576603421115580040552279623487667593878989046752845110912064)]
		[TestCase(-3.99, -0.98150028588018075502781350169066483704810156050628255774474701611118679)]
		[TestCase(-4, -0.98168436111126581970628197872675875778808793244652440523040007256074956)]
		public void Can_Expm1(double left, double result)
		{
			var x = (double)new BigDecimal(left).Expm1();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, 0)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity)]
		[TestCase(0, double.NegativeInfinity)]
		[TestCase(1, 1.89511781635593675546652093433163426901706058173270759164622843188251383)]
		[TestCase(-2, -0.04890051070806111956723983522804952231449218496302311632732287371169292)]
		[TestCase(4.99, 39.8896329861479531030900128408428660824005935005104230906952473089044356)]
		[TestCase(5, 40.1852753558031774550914217937958670954190873991959304341828752516426448)]
		[TestCase(-3.99, -0.00382542893329518213291111468058284463730810109606303515697901108366723)]
		[TestCase(-4, -0.0037793524098489064788748601324664148517165470424895803607340203135846)]
		public void Can_Eint(double left, double result)
		{
			var x = (double)new BigDecimal(left).Eint();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NegativeInfinity)]
		[TestCase(double.PositiveInfinity, double.NegativeInfinity)]
		[TestCase(0, 0)]
		[TestCase(1, 1.64493406684822643647241516664602518921894990120679843773555822937000747)]
		[TestCase(-2, -1.4367463668836809463629020238935833542499564356548721026672439248650157)]
		[TestCase(2, double.NaN)]
		[TestCase(-3.99, -2.3659136701715311979630584179745141203558957185829511650596897910181377)]
		[TestCase(-4, -2.3699397969983658319855374253503230487511447162867983411372259856179420)]
		public void Can_Li2(double left, double result)
		{
			var x = (double)new BigDecimal(left).Li2();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity)]
		[TestCase(0, double.NaN)]
		[TestCase(1, 1)]
		[TestCase(-2, double.NaN)]
		[TestCase(4.99, 23.6415020249042108430869021632412388539291158377050371119728387765019010)]
		[TestCase(5, 24)]
		public void Can_Gamma(double left, double result)
		{
			var x = (double)new BigDecimal(left).Gamma();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity)]
		[TestCase(0, double.PositiveInfinity)]
		[TestCase(1, 0)]
		[TestCase(-2, double.PositiveInfinity)]
		[TestCase(4.99, 3.16300372795197650966779596649027924968958736105864740860571297963688261)]
		[TestCase(5, 3.17805383034794561964694160129705540887399096090351521409673436211767515)]
		public void Can_LnGamma(double left, double result)
		{
			var x = (double)new BigDecimal(left).LnGamma();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity)]
		[TestCase(0, double.PositiveInfinity)]
		[TestCase(1, 0)]
		[TestCase(-2, double.PositiveInfinity)]
		[TestCase(4.99, 3.16300372795197650966779596649027924968958736105864740860571297963688261)]
		[TestCase(5, 3.17805383034794561964694160129705540887399096090351521409673436211767515)]
		public void Can_LGamma(double left, double result)
		{
			int sign;
			var x = (double)new BigDecimal(left).LGamma(out sign);
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.PositiveInfinity)]
		[TestCase(0, double.NaN)]
		[TestCase(1, -0.5772156649015328606065120900824024310421593359399235988057672348848677)]
		[TestCase(-2, double.NaN)]
		[TestCase(4.99, 1.50390199581064246544271319175707043022068650277591323562970272098885385)]
		[TestCase(5, 1.50611766843180047272682124325093090229117399739340973452756609844846560)]
		public void Can_Digamma(double left, double result)
		{
			var x = (double)new BigDecimal(left).Digamma();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.NaN)]
		[TestCase(0, -0.5)]
		[TestCase(1, double.NaN)]
		[TestCase(-2, 0)]
		[TestCase(4.99, 1.03721468317964233459234193242181025328005402517057708380664265756888540)]
		[TestCase(5, 1.03692775514336992633136548645703416805708091950191281197419267790380358)]
		[TestCase(-3.99, 0.00008012318251335879249300879854897031104752606538837930200471492694004)]
		[TestCase(-4, 0)]
		public void Can_Zeta(double left, double result)
		{
			var x = (double)new BigDecimal(left).Zeta();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, -1)]
		[TestCase(double.PositiveInfinity, 1)]
		[TestCase(0, 0)]
		[TestCase(1, 0.84270079294971486934122063508260925929606699796630290845993789783471725)]
		[TestCase(-2, -0.9953222650189527341620692563672529286108917970400600767383523262004372)]
		[TestCase(4.99, 0.99999999999829773389490032413359956905717912496180110796168656237250830)]
		[TestCase(5, 0.99999999999846254020557196514981165651461662110988194968527662006931208)]
		[TestCase(-3.99, -0.9999999832607886354791566233343249358090176817216585659698314878027625)]
		[TestCase(-4, -0.9999999845827420997199811478403265131159514278547464108088316570950057)]
		public void Can_Erf(double left, double result)
		{
			var x = (double)new BigDecimal(left).Erf();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, 2)]
		[TestCase(double.PositiveInfinity, 0)]
		[TestCase(0, 1)]
		[TestCase(1, 0.15729920705028513065877936491739074070393300203369709154006210216528274)]
		[TestCase(-2, 1.99532226501895273416206925636725292861089179704006007673835232620043728)]
		[TestCase(4.99, 0000000000001.70226610509967586640043094282087503819889203831343762749169816972654510)]
		[TestCase(5, 0000000000001.53745979442803485018834348538337889011805031472337993068791405592039136)]
		[TestCase(-3.99, 1.99999998326078863547915662333432493580901768172165856596983148780276252)]
		[TestCase(-4, 1.99999998458274209971998114784032651311595142785474641080883165709500578)]
		public void Can_Erfc(double left, double result)
		{
			var x = (double)new BigDecimal(left).Erfc();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.NaN)]
		[TestCase(0, 1)]
		[TestCase(1, 0.84147098480789650665250232163029899962256306079837106567275170999191040)]
		[TestCase(-2, 0.45464871341284084769800993295587242135112748572394513418948650576548365)]
		[TestCase(4.99, -0.1927280367588764524932156341505223811491142733789435445956900280056806)]
		[TestCase(5, -0.1917848549326276937786308812311987946704923087929203556263344908470205)]
		[TestCase(-3.99, -0.1880271499323104845348684958947570926022666859980338899399117593357688)]
		[TestCase(-4, -0.1892006238269820628431597736279572735339782218341181428713541933503276)]
		public void Can_J0(double left, double result)
		{
			var x = (double)new BigDecimal(left).J0();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, double.NaN)]
		[TestCase(double.PositiveInfinity, double.NaN)]
		[TestCase(0, 0)]
		[TestCase(1, 0.30116867893975678925156571418732239589025264018044883800265445461081000)]
		[TestCase(-2, -0.4353977749799916173477890812283173055585641283997450124723182397737242)]
		[TestCase(4.99, -0.0935444802213033459832279021738416687270847837898614900650875726999434)]
		[TestCase(5, -0.09508940807917079164905401054895122060098298020902726011133871148663439)]
		[TestCase(-3.99, -0.1185843829179372386303715428860577340122656456758093433702612446568417)]
		[TestCase(-4, -0.1161107492591574629490021023674482769725388437030250260339140226256025)]
		public void Can_J1(double left, double result)
		{
			var x = (double)new BigDecimal(left).J1();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, -1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(double.PositiveInfinity, 1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(0, 37, 0)]
		[TestCase(1, 3, 0.00900658111711251625940839047101854435072165853442840367340381459178811)]
		[TestCase(-2, 3, -0.0607220976628748284613951409881915369082326387894359488251588949640326)]
		[TestCase(4.99, 3, 0.23030687530463302337236736504539272188607327636445834255508370156057373)]
		[TestCase(5, 3, 0.22982061816429601043825248545077928291088550087653125967086997544167426)]
		[TestCase(-3.99, 3, -0.2287694267263899167220571250488968207706317651945945017598044125061920)]
		[TestCase(-4, -0.2292438579550302371196370856369810746066890995612086144620731152738093)]
		public void Can_Jn(double left, long order, double result)
		{
			var x = (double)new BigDecimal(left).Jn(order);
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, -1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(double.PositiveInfinity, 1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(0, 0)]
		[TestCase(1, 0.785398163397448309615660845819875721049292349843776455243736148076954101)]
		[TestCase(-2, -1.107148717794090503017065460178537040070047645401432646676539207433710338)]
		[TestCase(4.99, 1.373015410509370335358839786718272987657298502189157868960815747095157856)]
		[TestCase(5, 1.373400766945015860861271926444961148650999595899700808969783355912874233)]
		[TestCase(-3.99, -1.325228041094851409018012743310492231460089568287830623853936996195074952)]
		[TestCase(-4, -1.325817663668032465059239210428475631184440601306368843360096381486553083)]
		public void Can_Y0(double left, double result)
		{
			var x = (double)new BigDecimal(left).Y0();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, -1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(double.PositiveInfinity, 1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(0, 0)]
		[TestCase(1, 0.785398163397448309615660845819875721049292349843776455243736148076954101)]
		[TestCase(-2, -1.107148717794090503017065460178537040070047645401432646676539207433710338)]
		[TestCase(4.99, 1.373015410509370335358839786718272987657298502189157868960815747095157856)]
		[TestCase(5, 1.373400766945015860861271926444961148650999595899700808969783355912874233)]
		[TestCase(-3.99, -1.325228041094851409018012743310492231460089568287830623853936996195074952)]
		[TestCase(-4, -1.325817663668032465059239210428475631184440601306368843360096381486553083)]
		public void Can_Y1(double left, double result)
		{
			var x = (double)new BigDecimal(left).Y1();
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, -1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(double.PositiveInfinity, 1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(0, 0)]
		[TestCase(1, 0.785398163397448309615660845819875721049292349843776455243736148076954101)]
		[TestCase(-2, -1.107148717794090503017065460178537040070047645401432646676539207433710338)]
		[TestCase(4.99, 1.373015410509370335358839786718272987657298502189157868960815747095157856)]
		[TestCase(5, 1.373400766945015860861271926444961148650999595899700808969783355912874233)]
		[TestCase(-3.99, -1.325228041094851409018012743310492231460089568287830623853936996195074952)]
		[TestCase(-4, -1.325817663668032465059239210428475631184440601306368843360096381486553083)]
		public void Can_Yn(double left, double result)
		{
			var order = 1;
			var x = (double)new BigDecimal(left).Yn(order);
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, -1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(double.PositiveInfinity, 1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(0, 0)]
		[TestCase(1, 0.785398163397448309615660845819875721049292349843776455243736148076954101)]
		[TestCase(-2, -1.107148717794090503017065460178537040070047645401432646676539207433710338)]
		[TestCase(4.99, 1.373015410509370335358839786718272987657298502189157868960815747095157856)]
		[TestCase(5, 1.373400766945015860861271926444961148650999595899700808969783355912874233)]
		[TestCase(-3.99, -1.325228041094851409018012743310492231460089568287830623853936996195074952)]
		[TestCase(-4, -1.325817663668032465059239210428475631184440601306368843360096381486553083)]
		public void Can_Agm(double left, double right, double result)
		{
			var x = (double)new BigDecimal(left).Agm(right);
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, -1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(double.PositiveInfinity, 1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(0, 0)]
		[TestCase(1, 0.785398163397448309615660845819875721049292349843776455243736148076954101)]
		[TestCase(-2, -1.107148717794090503017065460178537040070047645401432646676539207433710338)]
		[TestCase(4.99, 1.373015410509370335358839786718272987657298502189157868960815747095157856)]
		[TestCase(5, 1.373400766945015860861271926444961148650999595899700808969783355912874233)]
		[TestCase(-3.99, -1.325228041094851409018012743310492231460089568287830623853936996195074952)]
		[TestCase(-4, -1.325817663668032465059239210428475631184440601306368843360096381486553083)]
		public void Can_Hypot(double left, double right, double result)
		{
			var x = (double)new BigDecimal(left).Hypot(right);
			x.Should().Be(result);
		}

		[TestCase(double.NaN, double.NaN)]
		[TestCase(double.NegativeInfinity, -1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(double.PositiveInfinity, 1.570796326794896619231321691639751442098584699687552910487472296153908203)]
		[TestCase(0, 0)]
		[TestCase(1, 0.785398163397448309615660845819875721049292349843776455243736148076954101)]
		[TestCase(-2, -1.107148717794090503017065460178537040070047645401432646676539207433710338)]
		[TestCase(4.99, 1.373015410509370335358839786718272987657298502189157868960815747095157856)]
		[TestCase(5, 1.373400766945015860861271926444961148650999595899700808969783355912874233)]
		[TestCase(-3.99, -1.325228041094851409018012743310492231460089568287830623853936996195074952)]
		[TestCase(-4, -1.325817663668032465059239210428475631184440601306368843360096381486553083)]
		public void Can_Ai(double left, double result)
		{
			var x = (double)new BigDecimal(left).Ai();
			x.Should().Be(result);
		}
	}
}