using static System.Numerics.MPFR.MPFRLibrary;

namespace System.Numerics.MPFR
{
	public partial class BigFloat
	{
		public static ulong GetDefaultPrec() => mpfr_get_default_prec();
		public static ulong GetPrec(BigFloat x) => mpfr_get_prec(x._value);
		public static void Set(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_set(rop._value,  op._value,  GetRounding(rnd));
		public static void Set(BigFloat rop, ulong op, Rounding? rnd = null) => mpfr_set_ui(rop._value,  op,  GetRounding(rnd));
		public static void Set(BigFloat rop, long op, Rounding? rnd = null) => mpfr_set_si(rop._value,  op,  GetRounding(rnd));
		public static void Set(BigFloat rop, float op, Rounding? rnd = null) => mpfr_set_flt(rop._value,  op,  GetRounding(rnd));
		public static void Set(BigFloat rop, double op, Rounding? rnd = null) => mpfr_set_d(rop._value,  op,  GetRounding(rnd));
		//public static void SetFloat128(BigFloat rop, __float128 op, Rounding? rnd = null) => mpfr_set_float128(rop._value,  op,  GetRounding(rnd));
		public static void Set2Exp(BigFloat rop, ulong op, long e, Rounding? rnd = null) => mpfr_set_ui_2exp(rop._value,  op,  e,  GetRounding(rnd));
		public static void Set2Exp(BigFloat rop, long op, long e, Rounding? rnd = null) => mpfr_set_si_2exp(rop._value,  op,  e,  GetRounding(rnd));
		public static void Set(BigFloat rop, string s, int sbase, Rounding? rnd = null) => mpfr_set_str(rop._value,  s,  sbase,  GetRounding(rnd));
		public static void SetNan(BigFloat x) => mpfr_set_nan(x._value);
		public static void SetInf(BigFloat x, int sign) => mpfr_set_inf(x._value,  sign);
		public static void SetZero(BigFloat x, int sign) => mpfr_set_zero(x._value,  sign);
		public static void Swap(BigFloat x, BigFloat y) => mpfr_swap(x._value,  y._value);
		public static float ToSingle(BigFloat op, Rounding? rnd = null) => mpfr_get_flt(op._value,  GetRounding(rnd));
		public static double ToDouble(BigFloat op, Rounding? rnd = null) => mpfr_get_d(op._value,  GetRounding(rnd));
		//public static __float128 GetFloat128(BigFloat op, Rounding? rnd = null) => mpfr_get_float128(op._value,  GetRounding(rnd));
		public static long ToInt64(BigFloat op, Rounding? rnd = null) => mpfr_get_si(op._value,  GetRounding(rnd));
		public static ulong ToUInt64(BigFloat op, Rounding? rnd = null) => mpfr_get_ui(op._value,  GetRounding(rnd));
		public static double ToDouble(ref long exp, BigFloat op, Rounding? rnd = null) => mpfr_get_d_2exp(ref exp,  op._value,  GetRounding(rnd));
		public static int Frexp(ref long exp, BigFloat y, BigFloat x, Rounding? rnd = null) => mpfr_frexp(ref exp,  y._value,  x._value,  GetRounding(rnd));
		public static bool FitsUlong(BigFloat op, Rounding? rnd = null) => mpfr_fits_ulong_p(op._value,  GetRounding(rnd)) != 0;
		public static bool FitsSlong(BigFloat op, Rounding? rnd = null) => mpfr_fits_slong_p(op._value,  GetRounding(rnd)) != 0;
		public static bool FitsUint(BigFloat op, Rounding? rnd = null) => mpfr_fits_uint_p(op._value,  GetRounding(rnd)) != 0;
		public static bool FitsSint(BigFloat op, Rounding? rnd = null) => mpfr_fits_sint_p(op._value,  GetRounding(rnd)) != 0;
		public static bool FitsUshort(BigFloat op, Rounding? rnd = null) => mpfr_fits_ushort_p(op._value,  GetRounding(rnd)) != 0;
		public static bool FitsSshort(BigFloat op, Rounding? rnd = null) => mpfr_fits_sshort_p(op._value,  GetRounding(rnd)) != 0;
		public static bool FitsUintmax(BigFloat op, Rounding? rnd = null) => mpfr_fits_uintmax_p(op._value,  GetRounding(rnd)) != 0;
		public static bool FitsIntmax(BigFloat op, Rounding? rnd = null) => mpfr_fits_intmax_p(op._value,  GetRounding(rnd)) != 0;
		public static void Add(BigFloat rop, BigFloat op1, BigFloat op2, Rounding? rnd = null) => mpfr_add(rop._value,  op1._value,  op2._value,  GetRounding(rnd));
		public static void Add(BigFloat rop, BigFloat op1, ulong op2, Rounding? rnd = null) => mpfr_add_ui(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Add(BigFloat rop, BigFloat op1, long op2, Rounding? rnd = null) => mpfr_add_si(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Add(BigFloat rop, BigFloat op1, double op2, Rounding? rnd = null) => mpfr_add_d(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Sub(BigFloat rop, BigFloat op1, BigFloat op2, Rounding? rnd = null) => mpfr_sub(rop._value,  op1._value,  op2._value,  GetRounding(rnd));
		public static void Sub(BigFloat rop, ulong op1, BigFloat op2, Rounding? rnd = null) => mpfr_ui_sub(rop._value,  op1,  op2._value,  GetRounding(rnd));
		public static void Sub(BigFloat rop, BigFloat op1, ulong op2, Rounding? rnd = null) => mpfr_sub_ui(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Sub(BigFloat rop, long op1, BigFloat op2, Rounding? rnd = null) => mpfr_si_sub(rop._value,  op1,  op2._value,  GetRounding(rnd));
		public static void Sub(BigFloat rop, BigFloat op1, long op2, Rounding? rnd = null) => mpfr_sub_si(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Sub(BigFloat rop, double op1, BigFloat op2, Rounding? rnd = null) => mpfr_d_sub(rop._value,  op1,  op2._value,  GetRounding(rnd));
		public static void Sub(BigFloat rop, BigFloat op1, double op2, Rounding? rnd = null) => mpfr_sub_d(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Mul(BigFloat rop, BigFloat op1, BigFloat op2, Rounding? rnd = null) => mpfr_mul(rop._value,  op1._value,  op2._value,  GetRounding(rnd));
		public static void Mul(BigFloat rop, BigFloat op1, ulong op2, Rounding? rnd = null) => mpfr_mul_ui(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Mul(BigFloat rop, BigFloat op1, long op2, Rounding? rnd = null) => mpfr_mul_si(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Mul(BigFloat rop, BigFloat op1, double op2, Rounding? rnd = null) => mpfr_mul_d(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Sqr(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_sqr(rop._value,  op._value,  GetRounding(rnd));
		public static void Div(BigFloat rop, BigFloat op1, BigFloat op2, Rounding? rnd = null) => mpfr_div(rop._value,  op1._value,  op2._value,  GetRounding(rnd));
		public static void Div(BigFloat rop, ulong op1, BigFloat op2, Rounding? rnd = null) => mpfr_ui_div(rop._value,  op1,  op2._value,  GetRounding(rnd));
		public static void Div(BigFloat rop, BigFloat op1, ulong op2, Rounding? rnd = null) => mpfr_div_ui(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Div(BigFloat rop, long op1, BigFloat op2, Rounding? rnd = null) => mpfr_si_div(rop._value,  op1,  op2._value,  GetRounding(rnd));
		public static void Div(BigFloat rop, BigFloat op1, long op2, Rounding? rnd = null) => mpfr_div_si(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Div(BigFloat rop, double op1, BigFloat op2, Rounding? rnd = null) => mpfr_d_div(rop._value,  op1,  op2._value,  GetRounding(rnd));
		public static void Div(BigFloat rop, BigFloat op1, double op2, Rounding? rnd = null) => mpfr_div_d(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Sqrt(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_sqrt(rop._value,  op._value,  GetRounding(rnd));
		public static void Sqrt(BigFloat rop, ulong op, Rounding? rnd = null) => mpfr_sqrt_ui(rop._value,  op,  GetRounding(rnd));
		public static void RecSqrt(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_rec_sqrt(rop._value,  op._value,  GetRounding(rnd));
		public static void Cbrt(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_cbrt(rop._value,  op._value,  GetRounding(rnd));
		public static void Rootn(BigFloat rop, BigFloat op, ulong k, Rounding? rnd = null) => mpfr_rootn_ui(rop._value,  op._value,  k,  GetRounding(rnd));
		public static void Root(BigFloat rop, BigFloat op, ulong k, Rounding? rnd = null) => mpfr_root(rop._value,  op._value,  k,  GetRounding(rnd));
		public static void Pow(BigFloat rop, BigFloat op1, BigFloat op2, Rounding? rnd = null) => mpfr_pow(rop._value,  op1._value,  op2._value,  GetRounding(rnd));
		public static void Pow(BigFloat rop, BigFloat op1, ulong op2, Rounding? rnd = null) => mpfr_pow_ui(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Pow(BigFloat rop, BigFloat op1, long op2, Rounding? rnd = null) => mpfr_pow_si(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Pow(BigFloat rop, ulong op1, ulong op2, Rounding? rnd = null) => mpfr_ui_pow_ui(rop._value,  op1,  op2,  GetRounding(rnd));
		public static void Pow(BigFloat rop, ulong op1, BigFloat op2, Rounding? rnd = null) => mpfr_ui_pow(rop._value,  op1,  op2._value,  GetRounding(rnd));
		public static void Neg(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_neg(rop._value,  op._value,  GetRounding(rnd));
		public static void Abs(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_abs(rop._value,  op._value,  GetRounding(rnd));
		public static void Dim(BigFloat rop, BigFloat op1, BigFloat op2, Rounding? rnd = null) => mpfr_dim(rop._value,  op1._value,  op2._value,  GetRounding(rnd));
		public static void Mul2(BigFloat rop, BigFloat op1, ulong op2, Rounding? rnd = null) => mpfr_mul_2ui(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Mul2(BigFloat rop, BigFloat op1, long op2, Rounding? rnd = null) => mpfr_mul_2si(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Div2(BigFloat rop, BigFloat op1, ulong op2, Rounding? rnd = null) => mpfr_div_2ui(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Div2(BigFloat rop, BigFloat op1, long op2, Rounding? rnd = null) => mpfr_div_2si(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static int Cmp(BigFloat op1, BigFloat op2) => mpfr_cmp(op1._value,  op2._value);
		public static int Cmp(BigFloat op1, ulong op2) => mpfr_cmp_ui(op1._value,  op2);
		public static int Cmp(BigFloat op1, long op2) => mpfr_cmp_si(op1._value,  op2);
		public static int Cmp(BigFloat op1, double op2) => mpfr_cmp_d(op1._value,  op2);
		public static int Cmp2Exp(BigFloat op1, ulong op2, long e) => mpfr_cmp_ui_2exp(op1._value,  op2,  e);
		public static int Cmp2Exp(BigFloat op1, long op2, long e) => mpfr_cmp_si_2exp(op1._value,  op2,  e);
		public static int CmpAbs(BigFloat op1, BigFloat op2) => mpfr_cmpabs(op1._value,  op2._value);
		public static bool Nan(BigFloat op) => mpfr_nan_p(op._value) != 0;
		public static bool Inf(BigFloat op) => mpfr_inf_p(op._value) != 0;
		public static bool Number(BigFloat op) => mpfr_number_p(op._value) != 0;
		public static bool Zero(BigFloat op) => mpfr_zero_p(op._value) != 0;
		public static bool Regular(BigFloat op) => mpfr_regular_p(op._value) != 0;
		public static bool Greater(BigFloat op1, BigFloat op2) => mpfr_greater_p(op1._value,  op2._value) != 0;
		public static bool GreaterOrEqual(BigFloat op1, BigFloat op2) => mpfr_greaterequal_p(op1._value,  op2._value) != 0;
		public static bool Lesser(BigFloat op1, BigFloat op2) => mpfr_less_p(op1._value,  op2._value) != 0;
		public static bool LesserOrEqual(BigFloat op1, BigFloat op2) => mpfr_lessequal_p(op1._value,  op2._value) != 0;
		public static bool Equal(BigFloat op1, BigFloat op2) => mpfr_equal_p(op1._value,  op2._value) != 0;
		public static bool LesserOrGreater(BigFloat op1, BigFloat op2) => mpfr_lessgreater_p(op1._value,  op2._value) != 0;
		public static bool Unordered(BigFloat op1, BigFloat op2) => mpfr_unordered_p(op1._value,  op2._value) != 0;
		public static void Log(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_log(rop._value,  op._value,  GetRounding(rnd));
		public static void Log(BigFloat rop, ulong op, Rounding? rnd = null) => mpfr_log_ui(rop._value,  op,  GetRounding(rnd));
		public static void Log2(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_log2(rop._value,  op._value,  GetRounding(rnd));
		public static void Log10(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_log10(rop._value,  op._value,  GetRounding(rnd));
		public static void Log1p(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_log1p(rop._value,  op._value,  GetRounding(rnd));
		public static void Exp(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_exp(rop._value,  op._value,  GetRounding(rnd));
		public static void Exp2(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_exp2(rop._value,  op._value,  GetRounding(rnd));
		public static void Exp10(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_exp10(rop._value,  op._value,  GetRounding(rnd));
		public static void Expm1(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_expm1(rop._value,  op._value,  GetRounding(rnd));
		public static void Cos(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_cos(rop._value,  op._value,  GetRounding(rnd));
		public static void Sin(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_sin(rop._value,  op._value,  GetRounding(rnd));
		public static void Tan(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_tan(rop._value,  op._value,  GetRounding(rnd));
		public static int SinCos(BigFloat sop, BigFloat cop, BigFloat op, Rounding? rnd = null) => mpfr_sin_cos(sop._value,  cop._value,  op._value,  GetRounding(rnd));
		public static void Sec(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_sec(rop._value,  op._value,  GetRounding(rnd));
		public static void Csc(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_csc(rop._value,  op._value,  GetRounding(rnd));
		public static void Cot(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_cot(rop._value,  op._value,  GetRounding(rnd));
		public static void Acos(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_acos(rop._value,  op._value,  GetRounding(rnd));
		public static void Asin(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_asin(rop._value,  op._value,  GetRounding(rnd));
		public static void Atan(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_atan(rop._value,  op._value,  GetRounding(rnd));
		public static void Atan2(BigFloat rop, BigFloat y, BigFloat x, Rounding? rnd = null) => mpfr_atan2(rop._value,  y._value,  x._value,  GetRounding(rnd));
		public static void Cosh(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_cosh(rop._value,  op._value,  GetRounding(rnd));
		public static void Sinh(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_sinh(rop._value,  op._value,  GetRounding(rnd));
		public static void Tanh(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_tanh(rop._value,  op._value,  GetRounding(rnd));
		public static int SinhCosh(BigFloat sop, BigFloat cop, BigFloat op, Rounding? rnd = null) => mpfr_sinh_cosh(sop._value,  cop._value,  op._value,  GetRounding(rnd));
		public static void Sech(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_sech(rop._value,  op._value,  GetRounding(rnd));
		public static void Csch(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_csch(rop._value,  op._value,  GetRounding(rnd));
		public static void Coth(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_coth(rop._value,  op._value,  GetRounding(rnd));
		public static void Acosh(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_acosh(rop._value,  op._value,  GetRounding(rnd));
		public static void Asinh(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_asinh(rop._value,  op._value,  GetRounding(rnd));
		public static void Atanh(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_atanh(rop._value,  op._value,  GetRounding(rnd));
		public static void Fac(BigFloat rop, ulong op, Rounding? rnd = null) => mpfr_fac_ui(rop._value,  op,  GetRounding(rnd));
		public static void Eint(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_eint(rop._value,  op._value,  GetRounding(rnd));
		public static void Li2(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_li2(rop._value,  op._value,  GetRounding(rnd));
		public static void Gamma(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_gamma(rop._value,  op._value,  GetRounding(rnd));
		public static void GammaInc(BigFloat rop, BigFloat op, BigFloat op2, Rounding? rnd = null) => mpfr_gamma_inc(rop._value,  op._value,  op2._value,  GetRounding(rnd));
		public static void Lngamma(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_lngamma(rop._value,  op._value,  GetRounding(rnd));
		public static void Lgamma(BigFloat rop, ref int signp, BigFloat op, Rounding? rnd = null) => mpfr_lgamma(rop._value,  ref signp,  op._value,  GetRounding(rnd));
		public static void Digamma(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_digamma(rop._value,  op._value,  GetRounding(rnd));
		public static void Beta(BigFloat rop, BigFloat op1, BigFloat op2, Rounding? rnd = null) => mpfr_beta(rop._value,  op1._value,  op2._value,  GetRounding(rnd));
		public static void Zeta(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_zeta(rop._value,  op._value,  GetRounding(rnd));
		public static void Zeta(BigFloat rop, ulong op, Rounding? rnd = null) => mpfr_zeta_ui(rop._value,  op,  GetRounding(rnd));
		public static void Erf(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_erf(rop._value,  op._value,  GetRounding(rnd));
		public static void Erfc(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_erfc(rop._value,  op._value,  GetRounding(rnd));
		public static void J0(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_j0(rop._value,  op._value,  GetRounding(rnd));
		public static void J1(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_j1(rop._value,  op._value,  GetRounding(rnd));
		public static void Jn(BigFloat rop, long n, BigFloat op, Rounding? rnd = null) => mpfr_jn(rop._value,  n,  op._value,  GetRounding(rnd));
		public static void Y0(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_y0(rop._value,  op._value,  GetRounding(rnd));
		public static void Y1(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_y1(rop._value,  op._value,  GetRounding(rnd));
		public static void Yn(BigFloat rop, long n, BigFloat op, Rounding? rnd = null) => mpfr_yn(rop._value,  n,  op._value,  GetRounding(rnd));
		public static void Fma(BigFloat rop, BigFloat op1, BigFloat op2, BigFloat op3, Rounding? rnd = null) => mpfr_fma(rop._value,  op1._value,  op2._value,  op3._value,  GetRounding(rnd));
		public static void Fms(BigFloat rop, BigFloat op1, BigFloat op2, BigFloat op3, Rounding? rnd = null) => mpfr_fms(rop._value,  op1._value,  op2._value,  op3._value,  GetRounding(rnd));
		public static void Fmma(BigFloat rop, BigFloat op1, BigFloat op2, BigFloat op3, BigFloat op4, Rounding? rnd = null) => mpfr_fmma(rop._value,  op1._value,  op2._value,  op3._value,  op4._value,  GetRounding(rnd));
		public static void Fmms(BigFloat rop, BigFloat op1, BigFloat op2, BigFloat op3, BigFloat op4, Rounding? rnd = null) => mpfr_fmms(rop._value,  op1._value,  op2._value,  op3._value,  op4._value,  GetRounding(rnd));
		public static void Agm(BigFloat rop, BigFloat op1, BigFloat op2, Rounding? rnd = null) => mpfr_agm(rop._value,  op1._value,  op2._value,  GetRounding(rnd));
		public static void Hypot(BigFloat rop, BigFloat x, BigFloat y, Rounding? rnd = null) => mpfr_hypot(rop._value,  x._value,  y._value,  GetRounding(rnd));
		public static void Ai(BigFloat rop, BigFloat x, Rounding? rnd = null) => mpfr_ai(rop._value,  x._value,  GetRounding(rnd));
		public static void ConstLog2(BigFloat rop, Rounding? rnd = null) => mpfr_const_log2(rop._value,  GetRounding(rnd));
		public static void ConstPi(BigFloat rop, Rounding? rnd = null) => mpfr_const_pi(rop._value,  GetRounding(rnd));
		public static void ConstEuler(BigFloat rop, Rounding? rnd = null) => mpfr_const_euler(rop._value,  GetRounding(rnd));
		public static void ConstCatalan(BigFloat rop, Rounding? rnd = null) => mpfr_const_catalan(rop._value,  GetRounding(rnd));
		public static int MpMemoryCleanup() => mpfr_mp_memory_cleanup();
		public static void Dump(BigFloat op) => mpfr_dump(op._value);
		public static void Rint(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_rint(rop._value,  op._value,  GetRounding(rnd));
		public static void Ceil(BigFloat rop, BigFloat op) => mpfr_ceil(rop._value,  op._value);
		public static void Floor(BigFloat rop, BigFloat op) => mpfr_floor(rop._value,  op._value);
		public static void Round(BigFloat rop, BigFloat op) => mpfr_round(rop._value,  op._value);
		public static void Roundeven(BigFloat rop, BigFloat op) => mpfr_roundeven(rop._value,  op._value);
		public static void Trunc(BigFloat rop, BigFloat op) => mpfr_trunc(rop._value,  op._value);
		public static void RintCeil(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_rint_ceil(rop._value,  op._value,  GetRounding(rnd));
		public static void RintFloor(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_rint_floor(rop._value,  op._value,  GetRounding(rnd));
		public static void RintRound(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_rint_round(rop._value,  op._value,  GetRounding(rnd));
		public static void RintRoundeven(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_rint_roundeven(rop._value,  op._value,  GetRounding(rnd));
		public static void RintTrunc(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_rint_trunc(rop._value,  op._value,  GetRounding(rnd));
		public static void Frac(BigFloat rop, BigFloat op, Rounding? rnd = null) => mpfr_frac(rop._value,  op._value,  GetRounding(rnd));
		public static int Modf(BigFloat iop, BigFloat fop, BigFloat op, Rounding? rnd = null) => mpfr_modf(iop._value,  fop._value,  op._value,  GetRounding(rnd));
		public static int Fmod(BigFloat r, BigFloat x, BigFloat y, Rounding? rnd = null) => mpfr_fmod(r._value,  x._value,  y._value,  GetRounding(rnd));
		public static int Fmodquo(BigFloat r, ref long q, BigFloat x, BigFloat y, Rounding? rnd = null) => mpfr_fmodquo(r._value,  ref q,  x._value,  y._value,  GetRounding(rnd));
		public static int Remainder(BigFloat r, BigFloat x, BigFloat y, Rounding? rnd = null) => mpfr_remainder(r._value,  x._value,  y._value,  GetRounding(rnd));
		public static int Remquo(BigFloat r, ref long q, BigFloat x, BigFloat y, Rounding? rnd = null) => mpfr_remquo(r._value,  ref q,  x._value,  y._value,  GetRounding(rnd));
		public static bool Integer(BigFloat op) => mpfr_integer_p(op._value) != 0;
		public static int GetDefaultRoundingMode() => mpfr_get_default_rounding_mode();
		public static int PrecRound(BigFloat x, ulong prec, Rounding? rnd = null)
		{
			var result = mpfr_prec_round(x._value, prec, GetRounding(rnd));
			x._precision = prec;
			return result;
		}
		public static int CanRound(BigFloat b, long err, Rounding rnd1, Rounding rnd2, ulong prec) => mpfr_can_round(b._value,  err,  GetRounding(rnd1),  GetRounding(rnd2),  prec);
		public static ulong MinPrec(BigFloat x) => mpfr_min_prec(x._value);
		public static string PrintRndMode(Rounding? rnd = null) => mpfr_print_rnd_mode(GetRounding(rnd));
		public static void NextToward(BigFloat x, BigFloat y) => mpfr_nexttoward(x._value,  y._value);
		public static void NextAbove(BigFloat x) => mpfr_nextabove(x._value);
		public static void NextBelow(BigFloat x) => mpfr_nextbelow(x._value);
		public static void Min(BigFloat rop, BigFloat op1, BigFloat op2, Rounding? rnd = null) => mpfr_min(rop._value,  op1._value,  op2._value,  GetRounding(rnd));
		public static void Max(BigFloat rop, BigFloat op1, BigFloat op2, Rounding? rnd = null) => mpfr_max(rop._value,  op1._value,  op2._value,  GetRounding(rnd));
		public static long GetExp(BigFloat x) => mpfr_get_exp(x._value);
		public static int SetExp(BigFloat x, long e) => mpfr_set_exp(x._value,  e);
		public static int SignBit(BigFloat op) => mpfr_signbit(op._value);
		public static void SetSign(BigFloat rop, BigFloat op, int s, Rounding? rnd = null) => mpfr_setsign(rop._value,  op._value,  s,  GetRounding(rnd));
		public static void CopySign(BigFloat rop, BigFloat op1, BigFloat op2, Rounding? rnd = null) => mpfr_copysign(rop._value,  op1._value,  op2._value,  GetRounding(rnd));
		public static string GetVersion() => mpfr_get_version();
		public static string GetPatches() => mpfr_get_patches();
		public static bool BuildoptTls() => mpfr_buildopt_tls_p() != 0;
		public static bool BuildoptFloat128() => mpfr_buildopt_float128_p() != 0;
		public static bool BuildoptDecimal() => mpfr_buildopt_decimal_p() != 0;
		public static bool BuildoptSharedcache() => mpfr_buildopt_sharedcache_p() != 0;
		public static string BuildoptTuneCase() => mpfr_buildopt_tune_case();
		public static long GetEmin() => mpfr_get_emin();
		public static long GetEmax() => mpfr_get_emax();
		public static int SetEmin(long exp) => mpfr_set_emin(exp);
		public static int SetEmax(long exp) => mpfr_set_emax(exp);
		public static long GetEminMin() => mpfr_get_emin_min();
		public static long GetEminMax() => mpfr_get_emin_max();
		public static long GetEmaxMin() => mpfr_get_emax_min();
		public static long GetEmaxMax() => mpfr_get_emax_max();
		public static int CheckRange(BigFloat x, int t, Rounding? rnd = null) => mpfr_check_range(x._value,  t,  GetRounding(rnd));
		public static int Subnormalize(BigFloat x, int t, Rounding? rnd = null) => mpfr_subnormalize(x._value,  t,  GetRounding(rnd));
		public static void ClearUnderflow() => mpfr_clear_underflow();
		public static void ClearOverflow() => mpfr_clear_overflow();
		public static void ClearDivby0() => mpfr_clear_divby0();
		public static void ClearNanflag() => mpfr_clear_nanflag();
		public static void ClearInexflag() => mpfr_clear_inexflag();
		public static void ClearErangeflag() => mpfr_clear_erangeflag();
		public static void ClearFlags() => mpfr_clear_flags();
		public static void SetUnderflow() => mpfr_set_underflow();
		public static void SetOverflow() => mpfr_set_overflow();
		public static void SetDivby0() => mpfr_set_divby0();
		public static void SetNanflag() => mpfr_set_nanflag();
		public static void SetInexflag() => mpfr_set_inexflag();
		public static void SetErangeflag() => mpfr_set_erangeflag();
		public static bool Underflow() => mpfr_underflow_p() != 0;
		public static bool Overflow() => mpfr_overflow_p() != 0;
		public static bool Divby0() => mpfr_divby0_p() != 0;
		public static bool Nanflag() => mpfr_nanflag_p() != 0;
		public static bool Inexflag() => mpfr_inexflag_p() != 0;
		public static bool Erangeflag() => mpfr_erangeflag_p() != 0;
		public static void FlagsClear(ExceptionFlag mask) => mpfr_flags_clear((Int32)mask);
		public static void FlagsSet(ExceptionFlag mask) => mpfr_flags_set((Int32)mask);
		public static ExceptionFlag FlagsTest(ExceptionFlag mask) => (ExceptionFlag)mpfr_flags_test((Int32)mask);
		public static ExceptionFlag FlagsSave() => (ExceptionFlag)mpfr_flags_save();
		public static void FlagsRestore(ExceptionFlag flags, ExceptionFlag mask) => mpfr_flags_restore((Int32)flags,  (Int32)mask);
		public static int Eq(BigFloat op1, BigFloat op2, ulong op3) => mpfr_eq(op1._value,  op2._value,  op3);
		public static void RelDiff(BigFloat rop, BigFloat op1, BigFloat op2, Rounding? rnd = null) => mpfr_reldiff(rop._value,  op1._value,  op2._value,  GetRounding(rnd));
		public static void Mul2Exp(BigFloat rop, BigFloat op1, ulong op2, Rounding? rnd = null) => mpfr_mul_2exp(rop._value,  op1._value,  op2,  GetRounding(rnd));
		public static void Div2Exp(BigFloat rop, BigFloat op1, ulong op2, Rounding? rnd = null) => mpfr_div_2exp(rop._value,  op1._value,  op2,  GetRounding(rnd));

		public ulong GetPrec() => GetPrec(this);
		public void Set(Rounding? rnd = null) => Set(this,  this,  rnd);
		public void Set(ulong op,  Rounding? rnd = null) => Set(this,  op,  rnd);
		public void Set(long op,  Rounding? rnd = null) => Set(this,  op,  rnd);
		public void Set(float op,  Rounding? rnd = null) => Set(this,  op,  rnd);
		public void Set(double op,  Rounding? rnd = null) => Set(this,  op,  rnd);
		//public void SetFloat128(__float128 op,  Rounding? rnd = null) => SetFloat128(this,  op,  rnd);
		public void Set2Exp(ulong op,  long e,  Rounding? rnd = null) => Set2Exp(this,  op,  e,  rnd);
		public void Set2Exp(long op,  long e,  Rounding? rnd = null) => Set2Exp(this,  op,  e,  rnd);
		public void Set(string s,  int sbase,  Rounding? rnd = null) => Set(this,  s,  sbase,  rnd);
		public void SetNan() => SetNan(this);
		public void SetInf(int sign) => SetInf(this,  sign);
		public void SetZero(int sign) => SetZero(this,  sign);
		public void Swap(BigFloat y) => Swap(this,  y);
		public float ToSingle(Rounding? rnd = null) => ToSingle(this,  rnd);
		public double ToDouble(Rounding? rnd = null) => ToDouble(this,  rnd);
		//public __float128 GetFloat128(Rounding? rnd = null) => GetFloat128(this,  rnd);
		public long ToInt64(Rounding? rnd = null) => ToInt64(this,  rnd);
		public ulong ToUInt64(Rounding? rnd = null) => ToUInt64(this,  rnd);
		public double ToDouble(ref long exp,  Rounding? rnd = null) => ToDouble(ref exp,  this,  rnd);
		public int Frexp(ref long exp,  BigFloat y,  Rounding? rnd = null) => Frexp(ref exp,  y,  this,  rnd);
		public bool FitsUlong(Rounding? rnd = null) => FitsUlong(this,  rnd);
		public bool FitsSlong(Rounding? rnd = null) => FitsSlong(this,  rnd);
		public bool FitsUint(Rounding? rnd = null) => FitsUint(this,  rnd);
		public bool FitsSint(Rounding? rnd = null) => FitsSint(this,  rnd);
		public bool FitsUshort(Rounding? rnd = null) => FitsUshort(this,  rnd);
		public bool FitsSshort(Rounding? rnd = null) => FitsSshort(this,  rnd);
		public bool FitsUintmax(Rounding? rnd = null) => FitsUintmax(this,  rnd);
		public bool FitsIntmax(Rounding? rnd = null) => FitsIntmax(this,  rnd);
		public void Add(BigFloat op2,  Rounding? rnd = null) => Add(this,  this,  op2,  rnd);
		public void Add(ulong op2,  Rounding? rnd = null) => Add(this,  this,  op2,  rnd);
		public void Add(long op2,  Rounding? rnd = null) => Add(this,  this,  op2,  rnd);
		public void Add(double op2,  Rounding? rnd = null) => Add(this,  this,  op2,  rnd);
		public void Sub(BigFloat op2,  Rounding? rnd = null) => Sub(this,  this,  op2,  rnd);
		public void Sub(ulong op1,  BigFloat op2,  Rounding? rnd = null) => Sub(this,  op1,  op2,  rnd);
		public void Sub(ulong op2,  Rounding? rnd = null) => Sub(this,  this,  op2,  rnd);
		public void Sub(long op1,  BigFloat op2,  Rounding? rnd = null) => Sub(this,  op1,  op2,  rnd);
		public void Sub(long op2,  Rounding? rnd = null) => Sub(this,  this,  op2,  rnd);
		public void Sub(double op1,  BigFloat op2,  Rounding? rnd = null) => Sub(this,  op1,  op2,  rnd);
		public void Sub(double op2,  Rounding? rnd = null) => Sub(this,  this,  op2,  rnd);
		public void Mul(BigFloat op2,  Rounding? rnd = null) => Mul(this,  this,  op2,  rnd);
		public void Mul(ulong op2,  Rounding? rnd = null) => Mul(this,  this,  op2,  rnd);
		public void Mul(long op2,  Rounding? rnd = null) => Mul(this,  this,  op2,  rnd);
		public void Mul(double op2,  Rounding? rnd = null) => Mul(this,  this,  op2,  rnd);
		public void Sqr(Rounding? rnd = null) => Sqr(this,  this,  rnd);
		public void Div(BigFloat op2,  Rounding? rnd = null) => Div(this,  this,  op2,  rnd);
		public void Div(ulong op1,  BigFloat op2,  Rounding? rnd = null) => Div(this,  op1,  op2,  rnd);
		public void Div(ulong op2,  Rounding? rnd = null) => Div(this,  this,  op2,  rnd);
		public void Div(long op1,  BigFloat op2,  Rounding? rnd = null) => Div(this,  op1,  op2,  rnd);
		public void Div(long op2,  Rounding? rnd = null) => Div(this,  this,  op2,  rnd);
		public void Div(double op1,  BigFloat op2,  Rounding? rnd = null) => Div(this,  op1,  op2,  rnd);
		public void Div(double op2,  Rounding? rnd = null) => Div(this,  this,  op2,  rnd);
		public void Sqrt(Rounding? rnd = null) => Sqrt(this,  this,  rnd);
		public void Sqrt(ulong op,  Rounding? rnd = null) => Sqrt(this,  op,  rnd);
		public void RecSqrt(Rounding? rnd = null) => RecSqrt(this,  this,  rnd);
		public void Cbrt(Rounding? rnd = null) => Cbrt(this,  this,  rnd);
		public void Rootn(ulong k,  Rounding? rnd = null) => Rootn(this,  this,  k,  rnd);
		public void Root(ulong k,  Rounding? rnd = null) => Root(this,  this,  k,  rnd);
		public void Pow(BigFloat op2,  Rounding? rnd = null) => Pow(this,  this,  op2,  rnd);
		public void Pow(ulong op2,  Rounding? rnd = null) => Pow(this,  this,  op2,  rnd);
		public void Pow(long op2,  Rounding? rnd = null) => Pow(this,  this,  op2,  rnd);
		public void Pow(ulong op1,  ulong op2,  Rounding? rnd = null) => Pow(this,  op1,  op2,  rnd);
		public void Pow(ulong op1,  BigFloat op2,  Rounding? rnd = null) => Pow(this,  op1,  op2,  rnd);
		public void Neg(Rounding? rnd = null) => Neg(this,  this,  rnd);
		public void Abs(Rounding? rnd = null) => Abs(this,  this,  rnd);
		public void Dim(BigFloat op2,  Rounding? rnd = null) => Dim(this,  this,  op2,  rnd);
		public void Mul2(ulong op2,  Rounding? rnd = null) => Mul2(this,  this,  op2,  rnd);
		public void Mul2(long op2,  Rounding? rnd = null) => Mul2(this,  this,  op2,  rnd);
		public void Div2(ulong op2,  Rounding? rnd = null) => Div2(this,  this,  op2,  rnd);
		public void Div2(long op2,  Rounding? rnd = null) => Div2(this,  this,  op2,  rnd);
		public int Cmp(BigFloat op2) => Cmp(this,  op2);
		public int Cmp(ulong op2) => Cmp(this,  op2);
		public int Cmp(long op2) => Cmp(this,  op2);
		public int Cmp(double op2) => Cmp(this,  op2);
		public int Cmp2Exp(ulong op2,  long e) => Cmp2Exp(this,  op2,  e);
		public int Cmp2Exp(long op2,  long e) => Cmp2Exp(this,  op2,  e);
		public int CmpAbs(BigFloat op2) => CmpAbs(this,  op2);
		public bool IsNan() => Nan(this);
		public bool IsInf() => Inf(this);
		public bool IsNumber() => Number(this);
		public bool IsZero() => Zero(this);
		public bool IsRegular() => Regular(this);
		public bool IsGreater(BigFloat op2) => Greater(this,  op2);
		public bool IsGreaterOrEqual(BigFloat op2) => GreaterOrEqual(this,  op2);
		public bool IsLesser(BigFloat op2) => Lesser(this,  op2);
		public bool IsLesserOrEqual(BigFloat op2) => LesserOrEqual(this,  op2);
		public bool IsEqual(BigFloat op2) => Equal(this,  op2);
		public bool IsLesserOrGreater(BigFloat op2) => LesserOrGreater(this,  op2);
		public bool IsUnordered(BigFloat op2) => Unordered(this,  op2);
		public void Log(Rounding? rnd = null) => Log(this,  this,  rnd);
		public void Log(ulong op,  Rounding? rnd = null) => Log(this,  op,  rnd);
		public void Log2(Rounding? rnd = null) => Log2(this,  this,  rnd);
		public void Log10(Rounding? rnd = null) => Log10(this,  this,  rnd);
		public void Log1p(Rounding? rnd = null) => Log1p(this,  this,  rnd);
		public void Exp(Rounding? rnd = null) => Exp(this,  this,  rnd);
		public void Exp2(Rounding? rnd = null) => Exp2(this,  this,  rnd);
		public void Exp10(Rounding? rnd = null) => Exp10(this,  this,  rnd);
		public void Expm1(Rounding? rnd = null) => Expm1(this,  this,  rnd);
		public void Cos(Rounding? rnd = null) => Cos(this,  this,  rnd);
		public void Sin(Rounding? rnd = null) => Sin(this,  this,  rnd);
		public void Tan(Rounding? rnd = null) => Tan(this,  this,  rnd);
		public int SinCos(BigFloat sop,  BigFloat cop,  Rounding? rnd = null) => SinCos(sop,  cop,  this,  rnd);
		public void Sec(Rounding? rnd = null) => Sec(this,  this,  rnd);
		public void Csc(Rounding? rnd = null) => Csc(this,  this,  rnd);
		public void Cot(Rounding? rnd = null) => Cot(this,  this,  rnd);
		public void Acos(Rounding? rnd = null) => Acos(this,  this,  rnd);
		public void Asin(Rounding? rnd = null) => Asin(this,  this,  rnd);
		public void Atan(Rounding? rnd = null) => Atan(this,  this,  rnd);
		public void Atan2(BigFloat y,  Rounding? rnd = null) => Atan2(this,  y,  this,  rnd);
		public void Cosh(Rounding? rnd = null) => Cosh(this,  this,  rnd);
		public void Sinh(Rounding? rnd = null) => Sinh(this,  this,  rnd);
		public void Tanh(Rounding? rnd = null) => Tanh(this,  this,  rnd);
		public int SinhCosh(BigFloat sop,  BigFloat cop,  Rounding? rnd = null) => SinhCosh(sop,  cop,  this,  rnd);
		public void Sech(Rounding? rnd = null) => Sech(this,  this,  rnd);
		public void Csch(Rounding? rnd = null) => Csch(this,  this,  rnd);
		public void Coth(Rounding? rnd = null) => Coth(this,  this,  rnd);
		public void Acosh(Rounding? rnd = null) => Acosh(this,  this,  rnd);
		public void Asinh(Rounding? rnd = null) => Asinh(this,  this,  rnd);
		public void Atanh(Rounding? rnd = null) => Atanh(this,  this,  rnd);
		public void Fac(ulong op,  Rounding? rnd = null) => Fac(this,  op,  rnd);
		public void Eint(Rounding? rnd = null) => Eint(this,  this,  rnd);
		public void Li2(Rounding? rnd = null) => Li2(this,  this,  rnd);
		public void Gamma(Rounding? rnd = null) => Gamma(this,  this,  rnd);
		public void GammaInc(BigFloat op2,  Rounding? rnd = null) => GammaInc(this,  this,  op2,  rnd);
		public void Lngamma(Rounding? rnd = null) => Lngamma(this,  this,  rnd);
		public void Lgamma(ref int signp,  Rounding? rnd = null) => Lgamma(this,  ref signp,  this,  rnd);
		public void Digamma(Rounding? rnd = null) => Digamma(this,  this,  rnd);
		public void Beta(BigFloat op2,  Rounding? rnd = null) => Beta(this,  this,  op2,  rnd);
		public void Zeta(Rounding? rnd = null) => Zeta(this,  this,  rnd);
		public void Zeta(ulong op,  Rounding? rnd = null) => Zeta(this,  op,  rnd);
		public void Erf(Rounding? rnd = null) => Erf(this,  this,  rnd);
		public void Erfc(Rounding? rnd = null) => Erfc(this,  this,  rnd);
		public void J0(Rounding? rnd = null) => J0(this,  this,  rnd);
		public void J1(Rounding? rnd = null) => J1(this,  this,  rnd);
		public void Jn(long n,  Rounding? rnd = null) => Jn(this,  n,  this,  rnd);
		public void Y0(Rounding? rnd = null) => Y0(this,  this,  rnd);
		public void Y1(Rounding? rnd = null) => Y1(this,  this,  rnd);
		public void Yn(long n,  Rounding? rnd = null) => Yn(this,  n,  this,  rnd);
		public void Fma(BigFloat op2,  BigFloat op3,  Rounding? rnd = null) => Fma(this,  this,  op2,  op3,  rnd);
		public void Fms(BigFloat op2,  BigFloat op3,  Rounding? rnd = null) => Fms(this,  this,  op2,  op3,  rnd);
		public void Fmma(BigFloat op2,  BigFloat op3,  BigFloat op4,  Rounding? rnd = null) => Fmma(this,  this,  op2,  op3,  op4,  rnd);
		public void Fmms(BigFloat op2,  BigFloat op3,  BigFloat op4,  Rounding? rnd = null) => Fmms(this,  this,  op2,  op3,  op4,  rnd);
		public void Agm(BigFloat op2,  Rounding? rnd = null) => Agm(this,  this,  op2,  rnd);
		public void Hypot(BigFloat y,  Rounding? rnd = null) => Hypot(this,  this,  y,  rnd);
		public void Ai(Rounding? rnd = null) => Ai(this,  this,  rnd);
		public void ConstLog2(Rounding? rnd = null) => ConstLog2(this,  rnd);
		public void ConstPi(Rounding? rnd = null) => ConstPi(this,  rnd);
		public void ConstEuler(Rounding? rnd = null) => ConstEuler(this,  rnd);
		public void ConstCatalan(Rounding? rnd = null) => ConstCatalan(this,  rnd);
		public void Dump() => Dump(this);
		public void Rint(Rounding? rnd = null) => Rint(this,  this,  rnd);
		public void Ceil() => Ceil(this,  this);
		public void Floor() => Floor(this,  this);
		public void Round() => Round(this,  this);
		public void Roundeven() => Roundeven(this,  this);
		public void Trunc() => Trunc(this,  this);
		public void RintCeil(Rounding? rnd = null) => RintCeil(this,  this,  rnd);
		public void RintFloor(Rounding? rnd = null) => RintFloor(this,  this,  rnd);
		public void RintRound(Rounding? rnd = null) => RintRound(this,  this,  rnd);
		public void RintRoundeven(Rounding? rnd = null) => RintRoundeven(this,  this,  rnd);
		public void RintTrunc(Rounding? rnd = null) => RintTrunc(this,  this,  rnd);
		public void Frac(Rounding? rnd = null) => Frac(this,  this,  rnd);
		public int Modf(BigFloat iop,  BigFloat fop,  Rounding? rnd = null) => Modf(iop,  fop,  this,  rnd);
		public int Fmod(BigFloat r,  BigFloat y,  Rounding? rnd = null) => Fmod(r,  this,  y,  rnd);
		public int Fmodquo(BigFloat r,  ref long q,  BigFloat y,  Rounding? rnd = null) => Fmodquo(r,  ref q,  this,  y,  rnd);
		public int Remainder(BigFloat r,  BigFloat y,  Rounding? rnd = null) => Remainder(r,  this,  y,  rnd);
		public int Remquo(BigFloat r,  ref long q,  BigFloat y,  Rounding? rnd = null) => Remquo(r,  ref q,  this,  y,  rnd);
		public bool IsInteger() => Integer(this);
		public int PrecRound(ulong prec, Rounding? rnd = null) => PrecRound(this, prec, rnd);
		public int CanRound(long err,  Rounding rnd1,  Rounding rnd2,  ulong prec) => CanRound(this,  err,  rnd1,  rnd2,  prec);
		public ulong MinPrec() => MinPrec(this);
		public void NextToward(BigFloat y) => NextToward(this,  y);
		public void NextAbove() => NextAbove(this);
		public void NextBelow() => NextBelow(this);
		public void Min(BigFloat op2,  Rounding? rnd = null) => Min(this,  this,  op2,  rnd);
		public void Max(BigFloat op2,  Rounding? rnd = null) => Max(this,  this,  op2,  rnd);
		public long GetExp() => GetExp(this);
		public int SetExp(long e) => SetExp(this,  e);
		public int SignBit() => SignBit(this);
		public void SetSign(int s,  Rounding? rnd = null) => SetSign(this,  this,  s,  rnd);
		public void CopySign(BigFloat op2,  Rounding? rnd = null) => CopySign(this,  this,  op2,  rnd);
		public int CheckRange(int t,  Rounding? rnd = null) => CheckRange(this,  t,  rnd);
		public int Subnormalize(int t,  Rounding? rnd = null) => Subnormalize(this,  t,  rnd);
		public int Eq(BigFloat op2,  ulong op3) => Eq(this,  op2,  op3);
		public void RelDiff(BigFloat op2,  Rounding? rnd = null) => RelDiff(this,  this,  op2,  rnd);
		public void Mul2Exp(ulong op2,  Rounding? rnd = null) => Mul2Exp(this,  this,  op2,  rnd);
		public void Div2Exp(ulong op2,  Rounding? rnd = null) => Div2Exp(this,  this,  op2,  rnd);
	}
}